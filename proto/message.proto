syntax = "proto3";

package im_message;

enum HeadType {
    LOGIN_REQUEST = 0; //登陆请求
    LOGIN_RESPONSE = 1; //登录响应
    LOGOUT_REQUEST = 2; //退出请求
    LOGOUT_RESPONSE = 3;
    KEEPALIVE_REQUEST = 4; //心跳请求PING;
    KEEPALIVE_RESPONSE = 5;
    MESSAGE_REQUEST = 6; //消息请求;
    MESSAGE_RESPONSE = 7; //消息回执;
    MESSAGE_NOTIFICATION = 8; //通知消息
}

/*登录信息*/
// LoginRequest对应的HeadType为Login_Request
// 消息名称去掉下划线，更加符合Java 的类名规范
message LoginRequest {
    string username = 1; // 用户名
    string password = 2; // 密码
    string platform = 3; //客户端平台 windows、mac、android、ios、web
}

//token说明: 账号服务器登录时生成的Token

/*登录响应*/
message LoginResponse {
    bool result = 1; //true 表示成功，false表示失败
    uint64 session_id = 2;
    uint32 code = 3; //错误码
    string info = 4; //错误描述
}

/*聊天消息*/
message MessageRequest {
    uint64 msg_id = 1; //消息id
    uint64 from = 2; //发送方sessionId
    uint64 to = 3; //接收方sessionId
    uint64 time = 4; //时间戳(单位:毫秒)
    uint32 msg_type = 5; //消息类型  1：纯文本  2：音频 3：视频 4：地理位置 5：其他
    string content = 6; //消息内容
    string url = 7; //多媒体地址
    string property = 8; //附加属性
    string from_nick = 9; //发送者昵称
    string json = 10; //附加的json串
}

/*聊天响应*/
message MessageResponse {
    bool result = 1; //true表示发送成功，false表示发送失败
    uint32 code = 2; //错误码
    string info = 3; //错误描述
}

/*系统通知消息*/
message MessageNotification {
    uint32 msg_type = 1; //通知类型 1 上线 2 下线 ...
    string sender = 2;
    string json = 3;
    string timestamp = 4;
}

/*顶层消息*/
//顶层消息是一种嵌套消息，嵌套了各种类型消息
//内部的消息类型，全部使用optional字段
//根据消息类型 type的值，最多只有一个有效
message Message {
    HeadType type = 1; //消息类型
    uint64 sequence = 2; //消息系列号
    uint64 session_id = 3;
    LoginRequest loginRequest = 4;
    LoginResponse loginResponse = 5;
    MessageRequest messageRequest = 6;
    MessageResponse messageResponse = 7;
    MessageNotification notification = 8;
}

// sequence 消息系列号
// 主要用于Request和Response，Response的值必须和Request相同，使得发送端可以进行事务匹配处理

